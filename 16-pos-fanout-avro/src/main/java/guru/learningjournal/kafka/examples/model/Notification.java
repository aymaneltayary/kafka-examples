/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package guru.learningjournal.kafka.examples.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Notification extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2326909544335372352L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Notification\",\"namespace\":\"guru.learningjournal.kafka.examples.model\",\"fields\":[{\"name\":\"invoiceNumber\",\"type\":[\"null\",\"string\"]},{\"name\":\"customerCardNo\",\"type\":[\"null\",\"string\"]},{\"name\":\"totalAmount\",\"type\":[\"null\",\"double\"]},{\"name\":\"earnedLoyaltyPoints\",\"type\":[\"null\",\"double\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Notification> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Notification> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Notification> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Notification> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Notification> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Notification to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Notification from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Notification instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Notification fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence invoiceNumber;
  private java.lang.CharSequence customerCardNo;
  private java.lang.Double totalAmount;
  private java.lang.Double earnedLoyaltyPoints;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Notification() {}

  /**
   * All-args constructor.
   * @param invoiceNumber The new value for invoiceNumber
   * @param customerCardNo The new value for customerCardNo
   * @param totalAmount The new value for totalAmount
   * @param earnedLoyaltyPoints The new value for earnedLoyaltyPoints
   */
  public Notification(java.lang.CharSequence invoiceNumber, java.lang.CharSequence customerCardNo, java.lang.Double totalAmount, java.lang.Double earnedLoyaltyPoints) {
    this.invoiceNumber = invoiceNumber;
    this.customerCardNo = customerCardNo;
    this.totalAmount = totalAmount;
    this.earnedLoyaltyPoints = earnedLoyaltyPoints;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return invoiceNumber;
    case 1: return customerCardNo;
    case 2: return totalAmount;
    case 3: return earnedLoyaltyPoints;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: invoiceNumber = (java.lang.CharSequence)value$; break;
    case 1: customerCardNo = (java.lang.CharSequence)value$; break;
    case 2: totalAmount = (java.lang.Double)value$; break;
    case 3: earnedLoyaltyPoints = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'invoiceNumber' field.
   * @return The value of the 'invoiceNumber' field.
   */
  public java.lang.CharSequence getInvoiceNumber() {
    return invoiceNumber;
  }


  /**
   * Sets the value of the 'invoiceNumber' field.
   * @param value the value to set.
   */
  public void setInvoiceNumber(java.lang.CharSequence value) {
    this.invoiceNumber = value;
  }

  /**
   * Gets the value of the 'customerCardNo' field.
   * @return The value of the 'customerCardNo' field.
   */
  public java.lang.CharSequence getCustomerCardNo() {
    return customerCardNo;
  }


  /**
   * Sets the value of the 'customerCardNo' field.
   * @param value the value to set.
   */
  public void setCustomerCardNo(java.lang.CharSequence value) {
    this.customerCardNo = value;
  }

  /**
   * Gets the value of the 'totalAmount' field.
   * @return The value of the 'totalAmount' field.
   */
  public java.lang.Double getTotalAmount() {
    return totalAmount;
  }


  /**
   * Sets the value of the 'totalAmount' field.
   * @param value the value to set.
   */
  public void setTotalAmount(java.lang.Double value) {
    this.totalAmount = value;
  }

  /**
   * Gets the value of the 'earnedLoyaltyPoints' field.
   * @return The value of the 'earnedLoyaltyPoints' field.
   */
  public java.lang.Double getEarnedLoyaltyPoints() {
    return earnedLoyaltyPoints;
  }


  /**
   * Sets the value of the 'earnedLoyaltyPoints' field.
   * @param value the value to set.
   */
  public void setEarnedLoyaltyPoints(java.lang.Double value) {
    this.earnedLoyaltyPoints = value;
  }

  /**
   * Creates a new Notification RecordBuilder.
   * @return A new Notification RecordBuilder
   */
  public static guru.learningjournal.kafka.examples.model.Notification.Builder newBuilder() {
    return new guru.learningjournal.kafka.examples.model.Notification.Builder();
  }

  /**
   * Creates a new Notification RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Notification RecordBuilder
   */
  public static guru.learningjournal.kafka.examples.model.Notification.Builder newBuilder(guru.learningjournal.kafka.examples.model.Notification.Builder other) {
    if (other == null) {
      return new guru.learningjournal.kafka.examples.model.Notification.Builder();
    } else {
      return new guru.learningjournal.kafka.examples.model.Notification.Builder(other);
    }
  }

  /**
   * Creates a new Notification RecordBuilder by copying an existing Notification instance.
   * @param other The existing instance to copy.
   * @return A new Notification RecordBuilder
   */
  public static guru.learningjournal.kafka.examples.model.Notification.Builder newBuilder(guru.learningjournal.kafka.examples.model.Notification other) {
    if (other == null) {
      return new guru.learningjournal.kafka.examples.model.Notification.Builder();
    } else {
      return new guru.learningjournal.kafka.examples.model.Notification.Builder(other);
    }
  }

  /**
   * RecordBuilder for Notification instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Notification>
    implements org.apache.avro.data.RecordBuilder<Notification> {

    private java.lang.CharSequence invoiceNumber;
    private java.lang.CharSequence customerCardNo;
    private java.lang.Double totalAmount;
    private java.lang.Double earnedLoyaltyPoints;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(guru.learningjournal.kafka.examples.model.Notification.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.invoiceNumber)) {
        this.invoiceNumber = data().deepCopy(fields()[0].schema(), other.invoiceNumber);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.customerCardNo)) {
        this.customerCardNo = data().deepCopy(fields()[1].schema(), other.customerCardNo);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.totalAmount)) {
        this.totalAmount = data().deepCopy(fields()[2].schema(), other.totalAmount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.earnedLoyaltyPoints)) {
        this.earnedLoyaltyPoints = data().deepCopy(fields()[3].schema(), other.earnedLoyaltyPoints);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Notification instance
     * @param other The existing instance to copy.
     */
    private Builder(guru.learningjournal.kafka.examples.model.Notification other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.invoiceNumber)) {
        this.invoiceNumber = data().deepCopy(fields()[0].schema(), other.invoiceNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerCardNo)) {
        this.customerCardNo = data().deepCopy(fields()[1].schema(), other.customerCardNo);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.totalAmount)) {
        this.totalAmount = data().deepCopy(fields()[2].schema(), other.totalAmount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.earnedLoyaltyPoints)) {
        this.earnedLoyaltyPoints = data().deepCopy(fields()[3].schema(), other.earnedLoyaltyPoints);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'invoiceNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getInvoiceNumber() {
      return invoiceNumber;
    }


    /**
      * Sets the value of the 'invoiceNumber' field.
      * @param value The value of 'invoiceNumber'.
      * @return This builder.
      */
    public guru.learningjournal.kafka.examples.model.Notification.Builder setInvoiceNumber(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.invoiceNumber = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'invoiceNumber' field has been set.
      * @return True if the 'invoiceNumber' field has been set, false otherwise.
      */
    public boolean hasInvoiceNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'invoiceNumber' field.
      * @return This builder.
      */
    public guru.learningjournal.kafka.examples.model.Notification.Builder clearInvoiceNumber() {
      invoiceNumber = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerCardNo' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerCardNo() {
      return customerCardNo;
    }


    /**
      * Sets the value of the 'customerCardNo' field.
      * @param value The value of 'customerCardNo'.
      * @return This builder.
      */
    public guru.learningjournal.kafka.examples.model.Notification.Builder setCustomerCardNo(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.customerCardNo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customerCardNo' field has been set.
      * @return True if the 'customerCardNo' field has been set, false otherwise.
      */
    public boolean hasCustomerCardNo() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customerCardNo' field.
      * @return This builder.
      */
    public guru.learningjournal.kafka.examples.model.Notification.Builder clearCustomerCardNo() {
      customerCardNo = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalAmount' field.
      * @return The value.
      */
    public java.lang.Double getTotalAmount() {
      return totalAmount;
    }


    /**
      * Sets the value of the 'totalAmount' field.
      * @param value The value of 'totalAmount'.
      * @return This builder.
      */
    public guru.learningjournal.kafka.examples.model.Notification.Builder setTotalAmount(java.lang.Double value) {
      validate(fields()[2], value);
      this.totalAmount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'totalAmount' field has been set.
      * @return True if the 'totalAmount' field has been set, false otherwise.
      */
    public boolean hasTotalAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'totalAmount' field.
      * @return This builder.
      */
    public guru.learningjournal.kafka.examples.model.Notification.Builder clearTotalAmount() {
      totalAmount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'earnedLoyaltyPoints' field.
      * @return The value.
      */
    public java.lang.Double getEarnedLoyaltyPoints() {
      return earnedLoyaltyPoints;
    }


    /**
      * Sets the value of the 'earnedLoyaltyPoints' field.
      * @param value The value of 'earnedLoyaltyPoints'.
      * @return This builder.
      */
    public guru.learningjournal.kafka.examples.model.Notification.Builder setEarnedLoyaltyPoints(java.lang.Double value) {
      validate(fields()[3], value);
      this.earnedLoyaltyPoints = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'earnedLoyaltyPoints' field has been set.
      * @return True if the 'earnedLoyaltyPoints' field has been set, false otherwise.
      */
    public boolean hasEarnedLoyaltyPoints() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'earnedLoyaltyPoints' field.
      * @return This builder.
      */
    public guru.learningjournal.kafka.examples.model.Notification.Builder clearEarnedLoyaltyPoints() {
      earnedLoyaltyPoints = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Notification build() {
      try {
        Notification record = new Notification();
        record.invoiceNumber = fieldSetFlags()[0] ? this.invoiceNumber : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.customerCardNo = fieldSetFlags()[1] ? this.customerCardNo : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.totalAmount = fieldSetFlags()[2] ? this.totalAmount : (java.lang.Double) defaultValue(fields()[2]);
        record.earnedLoyaltyPoints = fieldSetFlags()[3] ? this.earnedLoyaltyPoints : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Notification>
    WRITER$ = (org.apache.avro.io.DatumWriter<Notification>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Notification>
    READER$ = (org.apache.avro.io.DatumReader<Notification>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.invoiceNumber == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.invoiceNumber);
    }

    if (this.customerCardNo == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.customerCardNo);
    }

    if (this.totalAmount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.totalAmount);
    }

    if (this.earnedLoyaltyPoints == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.earnedLoyaltyPoints);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.invoiceNumber = null;
      } else {
        this.invoiceNumber = in.readString(this.invoiceNumber instanceof Utf8 ? (Utf8)this.invoiceNumber : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.customerCardNo = null;
      } else {
        this.customerCardNo = in.readString(this.customerCardNo instanceof Utf8 ? (Utf8)this.customerCardNo : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.totalAmount = null;
      } else {
        this.totalAmount = in.readDouble();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.earnedLoyaltyPoints = null;
      } else {
        this.earnedLoyaltyPoints = in.readDouble();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.invoiceNumber = null;
          } else {
            this.invoiceNumber = in.readString(this.invoiceNumber instanceof Utf8 ? (Utf8)this.invoiceNumber : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.customerCardNo = null;
          } else {
            this.customerCardNo = in.readString(this.customerCardNo instanceof Utf8 ? (Utf8)this.customerCardNo : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.totalAmount = null;
          } else {
            this.totalAmount = in.readDouble();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.earnedLoyaltyPoints = null;
          } else {
            this.earnedLoyaltyPoints = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










